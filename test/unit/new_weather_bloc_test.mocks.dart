// Mocks generated by Mockito 5.0.5 from annotations
// in flutter_bloc_simple_demo/test/unit/new_weather_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:bloc/src/bloc.dart' as _i6;
import 'package:bloc/src/transition.dart' as _i5;
import 'package:flutter_bloc_simple_demo/bloc/weather_bloc.dart' as _i3;
import 'package:flutter_bloc_simple_demo/data/weather_repo.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeWeatherRepo extends _i1.Fake implements _i2.WeatherRepo {}

class _FakeWeatherState extends _i1.Fake implements _i3.WeatherState {}

class _FakeStreamSubscription<T> extends _i1.Fake
    implements _i4.StreamSubscription<T> {}

/// A class which mocks [WeatherBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherBloc extends _i1.Mock implements _i3.WeatherBloc {
  MockWeatherBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WeatherRepo get weatherRepo =>
      (super.noSuchMethod(Invocation.getter(#weatherRepo),
          returnValue: _FakeWeatherRepo()) as _i2.WeatherRepo);
  @override
  _i3.WeatherState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeWeatherState()) as _i3.WeatherState);
  @override
  _i4.Stream<_i3.WeatherState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i3.WeatherState>.empty())
          as _i4.Stream<_i3.WeatherState>);
  @override
  _i4.Stream<_i3.WeatherState> mapEventToState(_i3.WeatherEvent? event) =>
      (super.noSuchMethod(Invocation.method(#mapEventToState, [event]),
              returnValue: Stream<_i3.WeatherState>.empty())
          as _i4.Stream<_i3.WeatherState>);
  @override
  void add(_i3.WeatherEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i3.WeatherEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  _i4.Stream<_i5.Transition<_i3.WeatherEvent, _i3.WeatherState>> transformEvents(
          _i4.Stream<_i3.WeatherEvent>? events,
          _i6.TransitionFunction<_i3.WeatherEvent, _i3.WeatherState>?
              transitionFn) =>
      (super.noSuchMethod(
              Invocation.method(#transformEvents, [events, transitionFn]),
              returnValue: Stream<
                  _i5.Transition<_i3.WeatherEvent, _i3.WeatherState>>.empty())
          as _i4.Stream<_i5.Transition<_i3.WeatherEvent, _i3.WeatherState>>);
  @override
  void emit(_i3.WeatherState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i5.Transition<_i3.WeatherEvent, _i3.WeatherState>? transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i4.Stream<_i5.Transition<_i3.WeatherEvent, _i3.WeatherState>>
      transformTransitions(
              _i4.Stream<_i5.Transition<_i3.WeatherEvent, _i3.WeatherState>>?
                  transitions) =>
          (super.noSuchMethod(
                  Invocation.method(#transformTransitions, [transitions]),
                  returnValue: Stream<
                      _i5.Transition<_i3.WeatherEvent, _i3.WeatherState>>.empty())
              as _i4
                  .Stream<_i5.Transition<_i3.WeatherEvent, _i3.WeatherState>>);
  @override
  _i4.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(null),
      returnValueForMissingStub: Future.value()) as _i4.Future<void>);
  @override
  _i4.StreamSubscription<_i3.WeatherState> listen(
          void Function(_i3.WeatherState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription<_i3.WeatherState>())
          as _i4.StreamSubscription<_i3.WeatherState>);
  @override
  void onChange(_i5.Change<_i3.WeatherState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}
